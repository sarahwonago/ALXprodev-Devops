#!/bin/bash

# Output and error setup
mkdir -p pokemon_data
ERROR_LOG="errors.log"
> "$ERROR_LOG"

# Pokémon list
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Track background process PIDs
pids=()

# Function to fetch a single Pokémon
fetch_pokemon() {
  name=$1
  max_retries=3
  attempt=1
  success=false

  echo "Fetching data for $name..."

  while [ $attempt -le $max_retries ]; do
    response=$(curl -s -w "%{http_code}" -o "pokemon_data/${name}.json" "https://pokeapi.co/api/v2/pokemon/$name")
    
    if [ "$response" -eq 200 ]; then
      echo "Saved data to pokemon_data/${name}.json"
      success=true
      break
    else
      echo "Attempt $attempt failed for $name (Status: $response)"
      ((attempt++))
      sleep 1
    fi
  done

  if ! $success; then
    echo "Failed to fetch data for $name after $max_retries attempts." >> "$ERROR_LOG"
    rm -f "pokemon_data/${name}.json"
  fi
}

# Cleanup function to kill background jobs on exit or Ctrl+C
cleanup() {
  echo "Cleaning up background processes..."
  for pid in "${pids[@]}"; do
    kill "$pid" 2>/dev/null
  done
  exit 1
}

# Trap interrupts and terminations
trap cleanup INT TERM

# Run fetches in parallel and track PIDs
for name in "${pokemon_list[@]}"; do
  fetch_pokemon "$name" &
  pids+=($!)
done

# Wait for all background jobs
for pid in "${pids[@]}"; do
  wait "$pid"
done

echo ""
echo "All fetch operations completed."
